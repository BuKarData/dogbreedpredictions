# -*- coding: utf-8 -*-
"""DogBreedprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16QywVPjdInFOir84U6LZQ5bI77HPP2fa
"""

from google.colab import files
files.upload()

#kaggle api
!pip install -q kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

#this lets avoid a warning on Kaggle tool startup
!chmod 600 ~/.kaggle/kaggle.json

# Commented out IPython magic to ensure Python compatibility.
!mkdir dog_dataset
# %cd dog_dataset

#searching for dataset
!kaggle datasets list -s dogbreedidfromcomp

# Commented out IPython magic to ensure Python compatibility.
#downloading dataset
!kaggle datasets download catherinehorng/dogbreedidfromcomp
# %cd ..

#managing files
!unzip dog_dataset/dogbreedidfromcomp.zip -d dog_dataset
!rm dog_dataset/dogbreedidfromcomp.zip
!rm dog_dataset/sample_submission.csv

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from tqdm import tqdm #for better process visualization
from keras.preprocessing import image
from sklearn.preprocessing import label_binarize
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.optimizers import Adam

labels_all = pd.read_csv('dog_dataset/labels.csv') #reading the data
labels_all.shape
labels_all.head()

breeds_all = labels_all['breed']
breeds_count = breeds_all.value_counts()
breeds_count.head()

#limitation of breeds for better performance (computation power limits)
CLASS_NAMES = ['scottish_deerhound','maltese_dog','bernese_mountain_dog']
labels = labels_all[labels_all['breed'].isin(CLASS_NAMES)]
labels = labels.reset_index()
labels.head()

#matrix of zeros
X_data = np.zeros((len(labels), 224,224,3), dtype = 'float32')
#one hot encoding
y_data = label_binarize(labels['breed'], classes = CLASS_NAMES)

#Reading and converting image to an array and normalizing it
for i in tqdm(range(len(labels))):
  img = image.load_img('dog_dataset/train/%s.jpg'% labels['id'][i], target_size = (224,224))
  img = image.img_to_array(img)
  x = np.expand_dims(img.copy(), axis = 0)
  X_data[i] = x / 255.0

  print ('\nTrain Images shape: ', X_data.shape, ' size: {:,}'.format(X_data.size))
  print ('\nEncoded output shape: ', y_data.shape, ' size: {:,}'.format(y_data.size))







